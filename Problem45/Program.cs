using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Problem45
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
                Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

                Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
                Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
                Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
                It can be verified that T285 = P165 = H143 = 40755.

                Find the next triangle number that is also pentagonal and hexagonal.             
            */

            long currentTriangleNumber = 144;
            long currentPentagonalNumber = 144;
            long currentHexagonalNumber = 144;
            long lastHexagonalValue = 0;
            bool bFound = false;
            while (!bFound)
            {
                lastHexagonalValue = currentHexagonalNumber * (2 * currentHexagonalNumber - 1);

                var pentagonalValue = currentPentagonalNumber * (3 * currentPentagonalNumber - 1) / 2;
                while (pentagonalValue < lastHexagonalValue)
                {
                    currentPentagonalNumber++;
                    pentagonalValue = currentPentagonalNumber * (3 * currentPentagonalNumber - 1) / 2;
                }
                if (pentagonalValue == lastHexagonalValue)
                {
                    bFound = true;
                }
                else
                {
                    currentHexagonalNumber++;
                }
            }
            var triangleValue = currentTriangleNumber * (currentTriangleNumber + 1) / 2;
            while (triangleValue < lastHexagonalValue)
            {
                currentTriangleNumber++;
                triangleValue = currentTriangleNumber * (currentTriangleNumber + 1) / 2;
            }
            Console.WriteLine($"found number {lastHexagonalValue}");
            Console.WriteLine($"found triangleNumber {currentTriangleNumber}");

        }
    }
}
